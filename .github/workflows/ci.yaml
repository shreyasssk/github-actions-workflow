name: CI

on:
  pull_request:
    branches: [staging, master]
  push:
    branches: [staging, master]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
      SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node_modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Testing
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - run: |
          cd client
          npm ci
          npm run test

      - name: Build Dev Project
        if: github.ref == 'refs/heads/staging'
        run: npm run build:dev

      - name: Build Prod Project
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: cd client && npm run build:prod

      - name: Upload Build Artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: ./client/dist

      - name: ZIP Assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          cd client
          zip -r build.zip ./dist/client

      - name: Create a Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Login to Docker Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/scribbler:latest ./client
          docker build --cache-from ${{ secrets.DOCKERHUB_USERNAME }}/scribbler -t ${{ secrets.DOCKERHUB_USERNAME }}/scribbler:$GITHUB_SHA ./client

      - name: Deploy to Staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        run: cd client && npx surge --project ./dist/client --domain staging-shreyasssk.surge.sh

      - name: Push Image to Docker Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/scribbler:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/scribbler:$GITHUB_SHA

      - name: Deploy to Production
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: cd client && npx surge --project ./dist/client --domain production-shreyasssk.surge.sh

      - name: Open Issue
        if: failure() && github.event_name == 'pull_request'
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/issues \
          --header 'authorization: Bearer ${{ secrets.PAT }}' \
          --header 'content-type: application/json' \
          --data '{
            "title": "Automated issue for commit: ${{ github.sha }}",
            "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_.",
            "assignees": ["${{ github.event.pull_request.user.login }}"]
            }'
